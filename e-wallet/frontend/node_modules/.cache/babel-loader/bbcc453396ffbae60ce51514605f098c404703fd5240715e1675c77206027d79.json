{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import apiService from'../services/api';// Define context types\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context\nconst AuthContext=/*#__PURE__*/createContext(undefined);// Define props for the provider component\n// Create the provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);const[user,setUser]=useState(null);const[wallets,setWallets]=useState([]);// Check if user is authenticated on mount\nuseEffect(()=>{const checkAuth=async()=>{const token=localStorage.getItem('token');if(token){try{const response=await apiService.getProfile();if(response.success&&response.data){setUser(response.data.user);setWallets(response.data.wallets);setIsAuthenticated(true);}else{// Clear invalid token\nlocalStorage.removeItem('token');}}catch(error){// Handle auth error\nlocalStorage.removeItem('token');}}setIsLoading(false);};checkAuth();},[]);// Login user\nconst login=async(username,password)=>{setIsLoading(true);try{const response=await apiService.login({username,password});if(response.success&&response.data){setUser(response.data.user);await refreshProfile();setIsAuthenticated(true);}else{throw new Error(response.error||'Login failed');}}catch(error){throw error;}finally{setIsLoading(false);}};// Register user\nconst register=async(username,email,password)=>{setIsLoading(true);try{const response=await apiService.register({username,email,password});if(response.success&&response.data){setUser(response.data.user);setWallets([response.data.wallet]);setIsAuthenticated(true);}else{throw new Error(response.error||'Registration failed');}}catch(error){throw error;}finally{setIsLoading(false);}};// Logout user\nconst logout=()=>{apiService.logout();setUser(null);setWallets([]);setIsAuthenticated(false);};// Refresh user profile\nconst refreshProfile=async()=>{try{const response=await apiService.getProfile();if(response.success&&response.data){setUser(response.data.user);setWallets(response.data.wallets);}}catch(error){console.error('Failed to refresh profile:',error);}};// Create context value\nconst value={isAuthenticated,isLoading,user,wallets,login,register,logout,refreshProfile};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Custom hook for using the auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","user","setUser","wallets","setWallets","checkAuth","token","localStorage","getItem","response","getProfile","success","data","removeItem","error","login","username","password","refreshProfile","Error","register","email","wallet","logout","console","value","Provider","useAuth","context"],"sources":["C:/Users/ASUS/Documents/RPL3/e-wallet/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, Wallet } from '@e-wallet/shared';\r\nimport apiService from '../services/api';\r\n\r\n// Define context types\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  user: User | null;\r\n  wallets: Wallet[];\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (username: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  refreshProfile: () => Promise<void>;\r\n}\r\n\r\n// Create the context\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Define props for the provider component\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Create the provider component\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [wallets, setWallets] = useState<Wallet[]>([]);\r\n\r\n  // Check if user is authenticated on mount\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (token) {\r\n        try {\r\n          const response = await apiService.getProfile();\r\n          if (response.success && response.data) {\r\n            setUser(response.data.user);\r\n            setWallets(response.data.wallets);\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            // Clear invalid token\r\n            localStorage.removeItem('token');\r\n          }\r\n        } catch (error) {\r\n          // Handle auth error\r\n          localStorage.removeItem('token');\r\n        }\r\n      }\r\n      \r\n      setIsLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Login user\r\n  const login = async (username: string, password: string) => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const response = await apiService.login({ username, password });\r\n      \r\n      if (response.success && response.data) {\r\n        setUser(response.data.user);\r\n        await refreshProfile();\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        throw new Error(response.error || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register user\r\n  const register = async (username: string, email: string, password: string) => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const response = await apiService.register({ username, email, password });\r\n      \r\n      if (response.success && response.data) {\r\n        setUser(response.data.user);\r\n        setWallets([response.data.wallet]);\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        throw new Error(response.error || 'Registration failed');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    apiService.logout();\r\n    setUser(null);\r\n    setWallets([]);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Refresh user profile\r\n  const refreshProfile = async () => {\r\n    try {\r\n      const response = await apiService.getProfile();\r\n      \r\n      if (response.success && response.data) {\r\n        setUser(response.data.user);\r\n        setWallets(response.data.wallets);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to refresh profile:', error);\r\n    }\r\n  };\r\n\r\n  // Create context value\r\n  const value = {\r\n    isAuthenticated,\r\n    isLoading,\r\n    user,\r\n    wallets,\r\n    login,\r\n    register,\r\n    logout,\r\n    refreshProfile\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using the auth context\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  \r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}