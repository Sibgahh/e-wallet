{"ast":null,"code":"import axios from 'axios';\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Define API service class\nclass ApiService {\n  // Auth endpoints\n\n  /**\r\n   * Register a new user\r\n   * @param data User registration data\r\n   * @returns API response with token and user\r\n   */\n  async register(data) {\n    var _response$data$data;\n    const response = await api.post('/auth/register', data);\n\n    // Store token in localStorage\n    if (response.data.success && (_response$data$data = response.data.data) !== null && _response$data$data !== void 0 && _response$data$data.token) {\n      localStorage.setItem('token', response.data.data.token);\n    }\n    return response.data;\n  }\n\n  /**\r\n   * Login user\r\n   * @param data User login data\r\n   * @returns API response with token and user\r\n   */\n  async login(data) {\n    var _response$data$data2;\n    const response = await api.post('/auth/login', data);\n\n    // Store token in localStorage\n    if (response.data.success && (_response$data$data2 = response.data.data) !== null && _response$data$data2 !== void 0 && _response$data$data2.token) {\n      localStorage.setItem('token', response.data.data.token);\n    }\n    return response.data;\n  }\n\n  /**\r\n   * Logout user\r\n   */\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  /**\r\n   * Get user profile\r\n   * @returns API response with user and wallets\r\n   */\n  async getProfile() {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  }\n\n  // Wallet endpoints\n\n  /**\r\n   * Get all wallets for current user\r\n   * @returns API response with wallets\r\n   */\n  async getWallets() {\n    const response = await api.get('/wallets');\n    return response.data;\n  }\n\n  /**\r\n   * Get wallet by ID\r\n   * @param id Wallet ID\r\n   * @returns API response with wallet\r\n   */\n  async getWallet(id) {\n    const response = await api.get(`/wallets/${id}`);\n    return response.data;\n  }\n\n  /**\r\n   * Create a new wallet\r\n   * @param currency Currency code (default: USD)\r\n   * @returns API response with created wallet\r\n   */\n  async createWallet(currency) {\n    const response = await api.post('/wallets', {\n      currency\n    });\n    return response.data;\n  }\n\n  /**\r\n   * Deposit funds to wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to deposit\r\n   * @returns API response with updated wallet\r\n   */\n  async deposit(walletId, amount) {\n    const response = await api.post(`/wallets/${walletId}/deposit`, {\n      amount\n    });\n    return response.data;\n  }\n\n  /**\r\n   * Withdraw funds from wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to withdraw\r\n   * @returns API response with updated wallet\r\n   */\n  async withdraw(walletId, amount) {\n    const response = await api.post(`/wallets/${walletId}/withdraw`, {\n      amount\n    });\n    return response.data;\n  }\n\n  /**\r\n   * Transfer funds between wallets\r\n   * @param fromWalletId Source wallet ID\r\n   * @param toWalletId Destination wallet ID\r\n   * @param amount Amount to transfer\r\n   * @returns API response with updated wallets\r\n   */\n  async transfer(fromWalletId, toWalletId, amount) {\n    const response = await api.post('/wallets/transfer', {\n      fromWalletId,\n      toWalletId,\n      amount\n    });\n    return response.data;\n  }\n\n  // Transaction endpoints\n\n  /**\r\n   * Get all transactions for a wallet\r\n   * @param walletId Wallet ID\r\n   * @returns API response with transactions\r\n   */\n  async getWalletTransactions(walletId) {\n    const response = await api.get(`/transactions/wallet/${walletId}`);\n    return response.data;\n  }\n\n  /**\r\n   * Get transaction by ID\r\n   * @param id Transaction ID\r\n   * @returns API response with transaction\r\n   */\n  async getTransaction(id) {\n    const response = await api.get(`/transactions/${id}`);\n    return response.data;\n  }\n\n  /**\r\n   * Create a transaction\r\n   * @param walletId Wallet ID\r\n   * @param amount Transaction amount\r\n   * @param type Transaction type\r\n   * @param recipientWalletId Recipient wallet ID (for TRANSFER type)\r\n   * @param description Transaction description\r\n   * @returns API response with created transaction\r\n   */\n  async createTransaction(walletId, amount, type, recipientWalletId, description) {\n    const response = await api.post('/transactions', {\n      walletId,\n      amount,\n      type,\n      recipientWalletId,\n      description\n    });\n    return response.data;\n  }\n}\n\n// Export singleton instance\nexport default new ApiService();","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","ApiService","register","data","_response$data$data","response","post","success","setItem","login","_response$data$data2","logout","removeItem","getProfile","get","getWallets","getWallet","id","createWallet","currency","deposit","walletId","amount","withdraw","transfer","fromWalletId","toWalletId","getWalletTransactions","getTransaction","createTransaction","type","recipientWalletId","description"],"sources":["C:/Users/ASUS/Documents/RPL3/e-wallet/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { ApiResponse, LoginRequest, RegisterRequest, User, Wallet, Transaction, TransactionType } from '@e-wallet/shared';\r\n\r\n// Create axios instance\r\nconst api: AxiosInstance = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token && config.headers) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Define API service class\r\nclass ApiService {\r\n  // Auth endpoints\r\n  \r\n  /**\r\n   * Register a new user\r\n   * @param data User registration data\r\n   * @returns API response with token and user\r\n   */\r\n  async register(data: RegisterRequest): Promise<ApiResponse<{ token: string; user: User; wallet: Wallet }>> {\r\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User; wallet: Wallet }>> = \r\n      await api.post('/auth/register', data);\r\n    \r\n    // Store token in localStorage\r\n    if (response.data.success && response.data.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n    }\r\n    \r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Login user\r\n   * @param data User login data\r\n   * @returns API response with token and user\r\n   */\r\n  async login(data: LoginRequest): Promise<ApiResponse<{ token: string; user: User }>> {\r\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = \r\n      await api.post('/auth/login', data);\r\n    \r\n    // Store token in localStorage\r\n    if (response.data.success && response.data.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n    }\r\n    \r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Logout user\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n  }\r\n  \r\n  /**\r\n   * Get user profile\r\n   * @returns API response with user and wallets\r\n   */\r\n  async getProfile(): Promise<ApiResponse<{ user: User; wallets: Wallet[] }>> {\r\n    const response: AxiosResponse<ApiResponse<{ user: User; wallets: Wallet[] }>> = \r\n      await api.get('/auth/profile');\r\n    return response.data;\r\n  }\r\n  \r\n  // Wallet endpoints\r\n  \r\n  /**\r\n   * Get all wallets for current user\r\n   * @returns API response with wallets\r\n   */\r\n  async getWallets(): Promise<ApiResponse<Wallet[]>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet[]>> = \r\n      await api.get('/wallets');\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Get wallet by ID\r\n   * @param id Wallet ID\r\n   * @returns API response with wallet\r\n   */\r\n  async getWallet(id: string): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.get(`/wallets/${id}`);\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Create a new wallet\r\n   * @param currency Currency code (default: USD)\r\n   * @returns API response with created wallet\r\n   */\r\n  async createWallet(currency?: string): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.post('/wallets', { currency });\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Deposit funds to wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to deposit\r\n   * @returns API response with updated wallet\r\n   */\r\n  async deposit(walletId: string, amount: number): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.post(`/wallets/${walletId}/deposit`, { amount });\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Withdraw funds from wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to withdraw\r\n   * @returns API response with updated wallet\r\n   */\r\n  async withdraw(walletId: string, amount: number): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.post(`/wallets/${walletId}/withdraw`, { amount });\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Transfer funds between wallets\r\n   * @param fromWalletId Source wallet ID\r\n   * @param toWalletId Destination wallet ID\r\n   * @param amount Amount to transfer\r\n   * @returns API response with updated wallets\r\n   */\r\n  async transfer(fromWalletId: string, toWalletId: string, amount: number): Promise<ApiResponse<{ from: Wallet; to: Wallet }>> {\r\n    const response: AxiosResponse<ApiResponse<{ from: Wallet; to: Wallet }>> = \r\n      await api.post('/wallets/transfer', { fromWalletId, toWalletId, amount });\r\n    return response.data;\r\n  }\r\n  \r\n  // Transaction endpoints\r\n  \r\n  /**\r\n   * Get all transactions for a wallet\r\n   * @param walletId Wallet ID\r\n   * @returns API response with transactions\r\n   */\r\n  async getWalletTransactions(walletId: string): Promise<ApiResponse<Transaction[]>> {\r\n    const response: AxiosResponse<ApiResponse<Transaction[]>> = \r\n      await api.get(`/transactions/wallet/${walletId}`);\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Get transaction by ID\r\n   * @param id Transaction ID\r\n   * @returns API response with transaction\r\n   */\r\n  async getTransaction(id: string): Promise<ApiResponse<Transaction>> {\r\n    const response: AxiosResponse<ApiResponse<Transaction>> = \r\n      await api.get(`/transactions/${id}`);\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Create a transaction\r\n   * @param walletId Wallet ID\r\n   * @param amount Transaction amount\r\n   * @param type Transaction type\r\n   * @param recipientWalletId Recipient wallet ID (for TRANSFER type)\r\n   * @param description Transaction description\r\n   * @returns API response with created transaction\r\n   */\r\n  async createTransaction(\r\n    walletId: string,\r\n    amount: number,\r\n    type: TransactionType,\r\n    recipientWalletId?: string,\r\n    description?: string\r\n  ): Promise<ApiResponse<Transaction>> {\r\n    const response: AxiosResponse<ApiResponse<Transaction>> = \r\n      await api.post('/transactions', {\r\n        walletId,\r\n        amount,\r\n        type,\r\n        recipientWalletId,\r\n        description\r\n      });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}