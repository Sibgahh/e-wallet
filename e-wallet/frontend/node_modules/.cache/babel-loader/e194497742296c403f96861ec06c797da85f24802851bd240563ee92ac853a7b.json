{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\RPL3\\\\e-wallet\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/api';\n\n// Define context types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Define props for the provider component\n\n// Create the provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const [wallets, setWallets] = useState([]);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await apiService.getProfile();\n          if (response.success && response.data) {\n            setUser(response.data.user);\n            setWallets(response.data.wallets);\n            setIsAuthenticated(true);\n          } else {\n            // Clear invalid token\n            localStorage.removeItem('token');\n          }\n        } catch (error) {\n          // Handle auth error\n          localStorage.removeItem('token');\n        }\n      }\n      setIsLoading(false);\n    };\n    checkAuth();\n  }, []); // Login user\n  const login = async (username, password) => {\n    console.log('AuthContext: Starting login process');\n    setIsLoading(true);\n    try {\n      console.log('AuthContext: Calling API login');\n      const response = await apiService.login({\n        username,\n        password\n      });\n      console.log('AuthContext: API response:', {\n        success: response.success,\n        hasData: !!response.data\n      });\n      if (response.success && response.data) {\n        console.log('AuthContext: Setting user and authenticated state');\n        setUser(response.data.user);\n        setIsAuthenticated(true);\n\n        // Refresh profile to get wallets\n        console.log('AuthContext: Refreshing profile');\n        await refreshProfile();\n        console.log('AuthContext: Login completed successfully');\n      } else {\n        throw new Error(response.error || 'Login failed');\n      }\n    } catch (error) {\n      console.error('AuthContext: Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Register user\n  const register = async (username, email, password) => {\n    setIsLoading(true);\n    try {\n      const response = await apiService.register({\n        username,\n        email,\n        password\n      });\n      if (response.success && response.data) {\n        setUser(response.data.user);\n        setWallets([response.data.wallet]);\n        setIsAuthenticated(true);\n      } else {\n        throw new Error(response.error || 'Registration failed');\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    apiService.logout();\n    setUser(null);\n    setWallets([]);\n    setIsAuthenticated(false);\n  };\n\n  // Refresh user profile\n  const refreshProfile = async () => {\n    try {\n      const response = await apiService.getProfile();\n      if (response.success && response.data) {\n        setUser(response.data.user);\n        setWallets(response.data.wallets);\n      }\n    } catch (error) {\n      console.error('Failed to refresh profile:', error);\n    }\n  };\n\n  // Create context value\n  const value = {\n    isAuthenticated,\n    isLoading,\n    user,\n    wallets,\n    login,\n    register,\n    logout,\n    refreshProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using the auth context\n_s(AuthProvider, \"ZnmZTKntRpTEuHxoZ/ARONxhZE8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","user","setUser","wallets","setWallets","checkAuth","token","localStorage","getItem","response","getProfile","success","data","removeItem","error","login","username","password","console","log","hasData","refreshProfile","Error","register","email","wallet","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/RPL3/e-wallet/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, Wallet } from '@e-wallet/shared';\r\nimport apiService from '../services/api';\r\n\r\n// Define context types\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  user: User | null;\r\n  wallets: Wallet[];\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (username: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  refreshProfile: () => Promise<void>;\r\n}\r\n\r\n// Create the context\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Define props for the provider component\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Create the provider component\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [wallets, setWallets] = useState<Wallet[]>([]);\r\n\r\n  // Check if user is authenticated on mount\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (token) {\r\n        try {\r\n          const response = await apiService.getProfile();\r\n          if (response.success && response.data) {\r\n            setUser(response.data.user);\r\n            setWallets(response.data.wallets);\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            // Clear invalid token\r\n            localStorage.removeItem('token');\r\n          }\r\n        } catch (error) {\r\n          // Handle auth error\r\n          localStorage.removeItem('token');\r\n        }\r\n      }\r\n      \r\n      setIsLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);  // Login user\r\n  const login = async (username: string, password: string) => {\r\n    console.log('AuthContext: Starting login process');\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      console.log('AuthContext: Calling API login');\r\n      const response = await apiService.login({ username, password });\r\n      \r\n      console.log('AuthContext: API response:', { success: response.success, hasData: !!response.data });\r\n      \r\n      if (response.success && response.data) {\r\n        console.log('AuthContext: Setting user and authenticated state');\r\n        setUser(response.data.user);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Refresh profile to get wallets\r\n        console.log('AuthContext: Refreshing profile');\r\n        await refreshProfile();\r\n        \r\n        console.log('AuthContext: Login completed successfully');\r\n      } else {\r\n        throw new Error(response.error || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('AuthContext: Login error:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register user\r\n  const register = async (username: string, email: string, password: string) => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const response = await apiService.register({ username, email, password });\r\n      \r\n      if (response.success && response.data) {\r\n        setUser(response.data.user);\r\n        setWallets([response.data.wallet]);\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        throw new Error(response.error || 'Registration failed');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    apiService.logout();\r\n    setUser(null);\r\n    setWallets([]);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Refresh user profile\r\n  const refreshProfile = async () => {\r\n    try {\r\n      const response = await apiService.getProfile();\r\n      \r\n      if (response.success && response.data) {\r\n        setUser(response.data.user);\r\n        setWallets(response.data.wallets);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to refresh profile:', error);\r\n    }\r\n  };\r\n\r\n  // Create context value\r\n  const value = {\r\n    isAuthenticated,\r\n    isLoading,\r\n    user,\r\n    wallets,\r\n    login,\r\n    register,\r\n    logout,\r\n    refreshProfile\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using the auth context\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  \r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}