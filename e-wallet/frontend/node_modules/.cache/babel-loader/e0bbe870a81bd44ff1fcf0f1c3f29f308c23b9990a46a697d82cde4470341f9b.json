{"ast":null,"code":"import axios from'axios';// Create axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:4000/api',headers:{'Content-Type':'application/json'}});// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token&&config.headers){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>Promise.reject(error));// Define API service class\nclass ApiService{// Auth endpoints\n/**\r\n   * Register a new user\r\n   * @param data User registration data\r\n   * @returns API response with token and user\r\n   */async register(data){var _response$data$data;const response=await api.post('/auth/register',data);// Store token in localStorage\nif(response.data.success&&(_response$data$data=response.data.data)!==null&&_response$data$data!==void 0&&_response$data$data.token){localStorage.setItem('token',response.data.data.token);}return response.data;}/**\r\n   * Login user\r\n   * @param data User login data\r\n   * @returns API response with token and user\r\n   */async login(data){var _response$data$data2;const response=await api.post('/auth/login',data);// Store token in localStorage\nif(response.data.success&&(_response$data$data2=response.data.data)!==null&&_response$data$data2!==void 0&&_response$data$data2.token){localStorage.setItem('token',response.data.data.token);}return response.data;}/**\r\n   * Logout user\r\n   */logout(){localStorage.removeItem('token');}/**\r\n   * Get user profile\r\n   * @returns API response with user and wallets\r\n   */async getProfile(){const response=await api.get('/auth/profile');return response.data;}// Wallet endpoints\n/**\r\n   * Get all wallets for current user\r\n   * @returns API response with wallets\r\n   */async getWallets(){const response=await api.get('/wallets');return response.data;}/**\r\n   * Get wallet by ID\r\n   * @param id Wallet ID\r\n   * @returns API response with wallet\r\n   */async getWallet(id){const response=await api.get(\"/wallets/\".concat(id));return response.data;}/**\r\n   * Create a new wallet\r\n   * @param currency Currency code (default: USD)\r\n   * @returns API response with created wallet\r\n   */async createWallet(currency){const response=await api.post('/wallets',{currency});return response.data;}/**\r\n   * Deposit funds to wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to deposit\r\n   * @returns API response with updated wallet\r\n   */async deposit(walletId,amount){const response=await api.post(\"/wallets/\".concat(walletId,\"/deposit\"),{amount});return response.data;}/**\r\n   * Withdraw funds from wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to withdraw\r\n   * @returns API response with updated wallet\r\n   */async withdraw(walletId,amount){const response=await api.post(\"/wallets/\".concat(walletId,\"/withdraw\"),{amount});return response.data;}/**\r\n   * Transfer funds between wallets\r\n   * @param fromWalletId Source wallet ID\r\n   * @param toWalletId Destination wallet ID\r\n   * @param amount Amount to transfer\r\n   * @returns API response with updated wallets\r\n   */async transfer(fromWalletId,toWalletId,amount){const response=await api.post('/wallets/transfer',{fromWalletId,toWalletId,amount});return response.data;}// Transaction endpoints\n/**\r\n   * Get all transactions for a wallet\r\n   * @param walletId Wallet ID\r\n   * @returns API response with transactions\r\n   */async getWalletTransactions(walletId){const response=await api.get(\"/transactions/wallet/\".concat(walletId));return response.data;}/**\r\n   * Get transaction by ID\r\n   * @param id Transaction ID\r\n   * @returns API response with transaction\r\n   */async getTransaction(id){const response=await api.get(\"/transactions/\".concat(id));return response.data;}/**\r\n   * Create a transaction\r\n   * @param walletId Wallet ID\r\n   * @param amount Transaction amount\r\n   * @param type Transaction type\r\n   * @param recipientWalletId Recipient wallet ID (for TRANSFER type)\r\n   * @param description Transaction description\r\n   * @returns API response with created transaction\r\n   */async createTransaction(walletId,amount,type,recipientWalletId,description){const response=await api.post('/transactions',{walletId,amount,type,recipientWalletId,description});return response.data;}}// Export singleton instance\nexport default new ApiService();","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","ApiService","register","data","_response$data$data","response","post","success","setItem","login","_response$data$data2","logout","removeItem","getProfile","get","getWallets","getWallet","id","createWallet","currency","deposit","walletId","amount","withdraw","transfer","fromWalletId","toWalletId","getWalletTransactions","getTransaction","createTransaction","type","recipientWalletId","description"],"sources":["C:/Users/ASUS/Documents/RPL3/e-wallet/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { ApiResponse, LoginRequest, RegisterRequest, User, Wallet, Transaction, TransactionType } from '@e-wallet/shared';\r\n\r\n// Create axios instance\r\nconst api: AxiosInstance = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token && config.headers) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Define API service class\r\nclass ApiService {\r\n  // Auth endpoints\r\n  \r\n  /**\r\n   * Register a new user\r\n   * @param data User registration data\r\n   * @returns API response with token and user\r\n   */\r\n  async register(data: RegisterRequest): Promise<ApiResponse<{ token: string; user: User; wallet: Wallet }>> {\r\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User; wallet: Wallet }>> = \r\n      await api.post('/auth/register', data);\r\n    \r\n    // Store token in localStorage\r\n    if (response.data.success && response.data.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n    }\r\n    \r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Login user\r\n   * @param data User login data\r\n   * @returns API response with token and user\r\n   */\r\n  async login(data: LoginRequest): Promise<ApiResponse<{ token: string; user: User }>> {\r\n    const response: AxiosResponse<ApiResponse<{ token: string; user: User }>> = \r\n      await api.post('/auth/login', data);\r\n    \r\n    // Store token in localStorage\r\n    if (response.data.success && response.data.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n    }\r\n    \r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Logout user\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n  }\r\n  \r\n  /**\r\n   * Get user profile\r\n   * @returns API response with user and wallets\r\n   */\r\n  async getProfile(): Promise<ApiResponse<{ user: User; wallets: Wallet[] }>> {\r\n    const response: AxiosResponse<ApiResponse<{ user: User; wallets: Wallet[] }>> = \r\n      await api.get('/auth/profile');\r\n    return response.data;\r\n  }\r\n  \r\n  // Wallet endpoints\r\n  \r\n  /**\r\n   * Get all wallets for current user\r\n   * @returns API response with wallets\r\n   */\r\n  async getWallets(): Promise<ApiResponse<Wallet[]>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet[]>> = \r\n      await api.get('/wallets');\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Get wallet by ID\r\n   * @param id Wallet ID\r\n   * @returns API response with wallet\r\n   */\r\n  async getWallet(id: string): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.get(`/wallets/${id}`);\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Create a new wallet\r\n   * @param currency Currency code (default: USD)\r\n   * @returns API response with created wallet\r\n   */\r\n  async createWallet(currency?: string): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.post('/wallets', { currency });\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Deposit funds to wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to deposit\r\n   * @returns API response with updated wallet\r\n   */\r\n  async deposit(walletId: string, amount: number): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.post(`/wallets/${walletId}/deposit`, { amount });\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Withdraw funds from wallet\r\n   * @param walletId Wallet ID\r\n   * @param amount Amount to withdraw\r\n   * @returns API response with updated wallet\r\n   */\r\n  async withdraw(walletId: string, amount: number): Promise<ApiResponse<Wallet>> {\r\n    const response: AxiosResponse<ApiResponse<Wallet>> = \r\n      await api.post(`/wallets/${walletId}/withdraw`, { amount });\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Transfer funds between wallets\r\n   * @param fromWalletId Source wallet ID\r\n   * @param toWalletId Destination wallet ID\r\n   * @param amount Amount to transfer\r\n   * @returns API response with updated wallets\r\n   */\r\n  async transfer(fromWalletId: string, toWalletId: string, amount: number): Promise<ApiResponse<{ from: Wallet; to: Wallet }>> {\r\n    const response: AxiosResponse<ApiResponse<{ from: Wallet; to: Wallet }>> = \r\n      await api.post('/wallets/transfer', { fromWalletId, toWalletId, amount });\r\n    return response.data;\r\n  }\r\n  \r\n  // Transaction endpoints\r\n  \r\n  /**\r\n   * Get all transactions for a wallet\r\n   * @param walletId Wallet ID\r\n   * @returns API response with transactions\r\n   */\r\n  async getWalletTransactions(walletId: string): Promise<ApiResponse<Transaction[]>> {\r\n    const response: AxiosResponse<ApiResponse<Transaction[]>> = \r\n      await api.get(`/transactions/wallet/${walletId}`);\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Get transaction by ID\r\n   * @param id Transaction ID\r\n   * @returns API response with transaction\r\n   */\r\n  async getTransaction(id: string): Promise<ApiResponse<Transaction>> {\r\n    const response: AxiosResponse<ApiResponse<Transaction>> = \r\n      await api.get(`/transactions/${id}`);\r\n    return response.data;\r\n  }\r\n  \r\n  /**\r\n   * Create a transaction\r\n   * @param walletId Wallet ID\r\n   * @param amount Transaction amount\r\n   * @param type Transaction type\r\n   * @param recipientWalletId Recipient wallet ID (for TRANSFER type)\r\n   * @param description Transaction description\r\n   * @returns API response with created transaction\r\n   */\r\n  async createTransaction(\r\n    walletId: string,\r\n    amount: number,\r\n    type: TransactionType,\r\n    recipientWalletId?: string,\r\n    description?: string\r\n  ): Promise<ApiResponse<Transaction>> {\r\n    const response: AxiosResponse<ApiResponse<Transaction>> = \r\n      await api.post('/transactions', {\r\n        walletId,\r\n        amount,\r\n        type,\r\n        recipientWalletId,\r\n        description\r\n      });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}